#!/usr/bin/env python
# -*- coding: utf-8 -*-
from __future__ import print_function

import sys
import os
import textwrap

DOCKER_IMAGE_NAME = 'drewsynan/velveeva'
DOCKER_WORK_DIR = '/home/project'
DOCKER_VELVEEVA_EXEC_DIR = '/VELVEEVA'
DOCKER_MEM = "8G"
DOCKER_SWAP = "8G"

PROGNAME = "velveeva"

def listget(l,idx):
	try:
		return l[idx]
	except IndexError:
		return None

def check_cmd(cmd):
	return os.system('which %s > /dev/null 2>&1 || exit 1' % cmd) == 0

def check_running():
	return os.system('eval $(docker-machine env) && docker-machine active 2>/dev/null 1>&1 | grep . 1>/dev/null || exit 1') == 0

def check_image():
	cmd = 'eval $(docker-machine env) && docker images -q drewsynan/velveeva 2>/dev/null 1>&1 | grep . 1>/dev/null || exit 1'
	return os.system(cmd) == 0

def logo():
	banner = textwrap.dedent('''\
		--------------------------------------
		 _   ________ _   ___________   _____ 
		| | / / __/ /| | / / __/ __| | / / _ |
		| |/ / _// /_| |/ / _// _/ | |/ / __ |
		|___/___/____|___/___/___/ |___/_/ |_|
		                                      
		======================================
		An easier way to manage, maintain, and 
		    build Veeva iRep presentations
		======================================

		''')

	print(banner)

def usage():
	usage = textwrap.dedent('''\
SYNOPSIS
	%(progname)s go [options]
	%(progname)s init
	%(progname)s util utilname [options]

DESCRIPTION
	The combined cli utility for Velveeva.

	The following options are available

	go 		build the project in the current directory. See
			go --help for more information

	init 	initialize the wizard to create a new project

	util 	execute a utility script

	update 	update to the latest utility image

	''' %{'progname': PROGNAME})

	logo()
	print(usage)
	util_help()

	sys.exit(0)

def util_help():
	banner = textwrap.dedent('''\
UTILS
	(For more information use: util util_name --help)

	%(progname)s util assets
	%(progname)s util build
	%(progname)s util convert
	%(progname)s util ctls
	%(progname)s util folders
	%(progname)s util package
	%(progname)s util prefix
	%(progname)s util publish
	%(progname)s util relink
	%(progname)s util rename
	%(progname)s util screenshots
	%(progname)s util styles
	%(progname)s util templates

		''' % {'progname': PROGNAME})

	print(banner)

def exec_docker_command(cmd, args=""):

	arg_dict = {
		'workdir': DOCKER_WORK_DIR,
		'imgname': DOCKER_IMAGE_NAME,
		'execdir': DOCKER_VELVEEVA_EXEC_DIR,
		'mem': DOCKER_MEM,
		'swap': DOCKER_SWAP,
		'cmd': cmd,
		'args': " ".join(args)
	}

	cmd_string = 'eval "$(docker-machine env)" && docker run -e "PYTHONIOENCODING=utf-8" --interactive --tty --rm --memory=4096M --memory-swap=-1 --volume "$PWD":%(workdir)s --workdir %(workdir)s %(imgname)s %(execdir)s/%(cmd)s %(args)s' % arg_dict
	os.system(cmd_string)

def exec_generic_docker_command(cmd, args=""):
	arg_dict = {
		'workdir': DOCKER_WORK_DIR,
		'imgname': DOCKER_IMAGE_NAME,
		'execdir': DOCKER_VELVEEVA_EXEC_DIR,
		'mem': DOCKER_MEM,
		'swap': DOCKER_SWAP,
		'cmd': cmd,
		'args': args
	}

	cmd_string = 'eval "$(docker-machine env)" && docker run --privileged --interactive --tty --rm --memory=4096M --memory-swap=-1 --volume "$PWD":%(workdir)s --workdir %(workdir)s %(imgname)s %(cmd)s %(args)s' % arg_dict
	os.system(cmd_string)

def exec_update():
	cmd_string = 'eval $(docker-machine env) && docker pull %s' % DOCKER_IMAGE_NAME
	os.system(cmd_string)

def exec_go():
	exec_docker_command('go.py', sys.argv[2:]) 

def exec_init():
	exec_docker_command('init', sys.argv[2:])

def exec_util(util, util_args):
	if util is None:
		logo()
		util_help()
	elif util == "assets":
		exec_docker_command('lib/assets.py', util_args)
	elif util == "build":
		exec_docker_command('lib/build.py', util_args)
	elif util == "convert":
		exec_docker_command('lib/convert.py', util_args)
	elif util == "ctls":
		exec_docker_command('lib/ctls.py', util_args)
	elif util == "folders":
		exec_docker_command('lib/folders.py', util_args)
	elif util == "package":
		exec_docker_command('lib/package.py', util_args)
	elif util == "prefix":
		exec_docker_command('lib/prefix.py', util_args)
	elif util == "publish":
		exec_docker_command('lib/publish.py', util_args)
	elif util == "relink":
		exec_docker_command('lib/relink.py', util_args)
	elif util == "rename":
		exec_docker_command('lib/rename.py', util_args)
	elif util == "screenshots":
		exec_docker_command('lib/screenshots.py', util_args)
	elif util == "styles":
		exec_docker_command('lib/styles.py', util_args)
	else:
		print(util + ' is not a recognized Velveeva util command')
		logo()
		util_help()

def doscript():

	if not check_cmd("docker"):
		print("docker not found")
		sys.exit(1)

	if not check_cmd("docker-machine"):
		print("docker-machine not found")
		sys.exit(1)

	if not check_running():
		print("No active docker-machine VM found.")
		os.system('docker-machine start && eval "$(docker-machine env)"')
		if not check_running():
			print("Could not start docker machine")
			sys.exit(1)

	if not check_image():
		os.system("eval $(docker-machine env) && docker pull %s" % DOCKER_IMAGE_NAME)
		if not check_image():
			sys.exit(1)

	if len(sys.argv) < 2: 
		logo()

	script_name = listget(sys.argv, 0)
	command = listget(sys.argv, 1)
	util_name = listget(sys.argv, 2)
	util_args = ' '.join(sys.argv[3:])

	if command == 'go':
		exec_go()
	elif command == 'init':
		exec_init()
	elif command == 'util':
		exec_util(util_name, util_args)
	elif command == 'update':
		exec_update()
	elif command == 'help':
		usage()
	elif command == 'bash':
		exec_generic_docker_command('bash')
	else:
		print("For usage and help use: " + PROGNAME + " help\n\n")
		pass

if __name__ == '__main__':
	try:
		doscript()
	except KeyboardInterrupt:
		print(u'ðŸ’£ bye!')
		try:
			sys.exit(0)
		except SystemExit:
			os._exit(0)